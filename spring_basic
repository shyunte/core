역할과 구현으로 구분하면  단순해지고, 유연해지며 변경도 편리
        역할 = 인터페이스,  구현 =인터페이스 구현 클래스 및 상속 관계
  클라이언트는
        -내부 구조를 몰라도된다
        -내부 구조가 변경되어도 영향 없음
        -대상 자체를 변경해도 영향 무
        - 대상 역할(인터페이스)만 알면 된다




다형성본질
    -인터페이스를 구현한 객체 인스턴스를 실행 시점에서  유연하게 변경할 수 있다.
    -본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야함
    -클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경 가능
    -interfcae를 안정적으로 설계하는게 제일 즁요함

                 save()                                             save()
Client (MemberService) -------------->  interface(MemberRepository)    <---------------MemoryMemberRepository
                                                                              |
                                                                              |
                                                                              |-------JdbcMemberRepository
                                                                                 save()



IoC 컨테이너
제어권이 넘어 가는 것
요즘은 DI컨테이너라고 말한다.


 @Bean만 사용하면 스프링 빈에 등록은 되지만 싱글톤은 생성해 주지 않는다
 그래서 @Configuration 사용하면 CGLIB이 자식 class를 자동으로 만들고 싱글톤을 생성해줌

 Spring bean의 라이프사이클
   - 스프링 컨테이너 생성 > 스프링 빈 생성 > 의존관계 주입> 초기화 콜백 > 사용 > 소멸전 콜백 > 스프링 종료





Scope

    prototype Bean은
    생성된 빈을 반환해주면(의존관계 주입, 초기화까지만 처리) 그 다음부터는 스프링컨테이너에서 관리해주지 않음












